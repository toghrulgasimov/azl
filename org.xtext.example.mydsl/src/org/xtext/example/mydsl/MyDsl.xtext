

grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.xbase.Xbase

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Override JvmPrimitiveType from Types grammar

Domainmodel:
    importSection=XImportSection?
    elements+=AbstractElement*;

AbstractElement:
    PackageDeclaration | Entity;

PackageDeclaration:
    'yigim' name=QualifiedName '{'
        elements+=AbstractElement*
    '}';

Entity:
    'sinif' name=ValidID ('varis' superType=JvmTypeReference)? '{'
        features+=Feature*
    '}';

Feature:
    Property | Operation;

Property:
    name=ValidID ':' type=JvmTypeReference;
    


Operation:
    'funksiya' name=ValidID 
        '('(params+=FullJvmFormalParameter 
        (',' params+=FullJvmFormalParameter)*)?')'
        ':' type=JvmTypeReference 
    body=XBlockExpression;


@Override
XWhileExpression returns xbase::XExpression:
    {xbase::XWhileExpression}
    'tekrar' '(' predicate=XExpression ')'
    body=XExpression;

@Override
XForLoopExpression returns xbase::XExpression:
	=>({xbase::XForLoopExpression}
	'dovr' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
		eachExpression=XExpression;

@Override
XBasicForLoopExpression returns xbase::XExpression:
	{xbase::XBasicForLoopExpression}
	'dovr' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
		expression=XExpression? ';'
		(updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
		eachExpression=XExpression;
		
@Override
XVariableDeclaration returns xbase::XExpression:
	{xbase::XVariableDeclaration}
	(writeable?='deyisen'|'verilen') (=>(type=JvmTypeReference name=ValidID) | name=ValidID) ('=' right=XExpression)?;		
		
	

@Override
XImportDeclaration returns xtype::XImportDeclaration:
    'daxilet'
    (
        (static?='static' extension?='extension'? 
            importedType=[types::JvmDeclaredType|QualifiedNameInStaticImport] 
            (wildcard?='*' | memberName=ValidID))
        | importedType=[types::JvmDeclaredType|QualifiedName]
        | importedNamespace=QualifiedNameWithWildcard
    ) ';'?;

@Override
XReturnExpression returns xbase::XExpression :
	{xbase::XReturnExpression} 'qaytar' (->expression=XExpression)?;

@Override
XIfExpression returns xbase::XExpression:
	{xbase::XIfExpression}
	'eger' '(' if=XExpression ')'
	then=XExpression
	(=>'yoxsa' else=XExpression)?;
	
@Override
XConstructorCall returns xbase::XExpression:
	{xbase::XConstructorCall}
	'yeni' constructor=[types::JvmConstructor|QualifiedName]
	(=>'<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	(=>explicitConstructorCall?='('
		(
		    arguments+=XShortClosure
		  | arguments+=XExpression (',' arguments+=XExpression)*
		)?
	')')?
	arguments+=XClosure?;

@Override
XBooleanLiteral returns xbase::XExpression :
	{xbase::XBooleanLiteral} ('dogru' | isTrue?='yanlis');
	
	

	