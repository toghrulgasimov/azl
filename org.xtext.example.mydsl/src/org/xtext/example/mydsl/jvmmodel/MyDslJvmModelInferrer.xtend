/*
 * generated by Xtext 2.40.0
 */
package org.xtext.example.mydsl.jvmmodel


import com.google.inject.Inject
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.xbase.XExpression
import org.xtext.example.mydsl.myDsl.Entity
import org.xtext.example.mydsl.myDsl.Operation
import org.xtext.example.mydsl.myDsl.Property
import org.eclipse.xtext.common.types.JvmTypeReference
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations

class MyDslJvmModelInferrer extends AbstractModelInferrer {
 
  @Inject extension JvmTypesBuilder
  @Inject extension IQualifiedNameProvider

  /**
   * Main inference for Entity
   */
  def dispatch void infer(Entity element,
                          IJvmDeclaredTypeAcceptor acceptor,
                          boolean isPrelinkingPhase) {
    acceptor.accept(element.toClass(element.fullyQualifiedName)) [
      documentation = element.documentation
      if (element.superType !== null)
        superTypes += element.superType.cloneWithProxies

	 
      // Add built-in capet() method
      members += it.toMethod("capet", typeRef(void)) [
        parameters += it.toParameter("msg", typeRef(Object))
        body = '''
          System.out.println(msg);
          
        '''
      ]
      
      

      // Optional main() method if "esas" exists
      val hasEsas = element.features.filter(Operation).exists[it.name == 'esas']
      if(hasEsas) {
        members += element.toMethod('main', typeRef(void)) [
          static = true
          val argsParam = element.toParameter('args', typeRef(String).addArrayTypeDimension)
          parameters += argsParam
          body = '''
            «element.name» m = new «element.name»();
            m.esas();
          '''
        ]
      }

      // Add properties and operations
      for (feature : element.features) {
        switch feature {
          Property : {
            members += feature.toField(feature.name, mapType(feature.type))
            members += feature.toGetter(feature.name, mapType(feature.type))
            members += feature.toSetter(feature.name, mapType(feature.type))
          }
          Operation : {
            members += feature.toMethod(feature.name, mapType(feature.type)) [
              documentation = feature.documentation
              for (p : feature.params) {
                parameters += p.toParameter(p.name, mapType(p.parameterType))
              }
              // Body: just pass through XExpression
              body = feature.body
            ]
          }
        }
      }
    ]
  }
  

	
	def JvmTypeReference mapType(JvmTypeReference type) {
	    if (type.simpleName == "Text") {
	        return typeRef(String) // map to java.lang.String
	    }
	    return type
	}
}
